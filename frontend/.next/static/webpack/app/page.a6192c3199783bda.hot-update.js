"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/server_utils.js":
/*!*****************************!*\
  !*** ./lib/server_utils.js ***!
  \*****************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   acceptOffer: () => (/* binding */ acceptOffer),\n/* harmony export */   connectserver: () => (/* binding */ connectserver),\n/* harmony export */   createConnection: () => (/* binding */ createConnection),\n/* harmony export */   declineOffer: () => (/* binding */ declineOffer),\n/* harmony export */   getPeerId: () => (/* binding */ getPeerId),\n/* harmony export */   handleSignal: () => (/* binding */ handleSignal),\n/* harmony export */   sendChunk: () => (/* binding */ sendChunk),\n/* harmony export */   sendSignal: () => (/* binding */ sendSignal)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nlet localConnection;\nlet dataChannel;\nlet ws;\nlet pendingOffer;\nlet remotePeerId;\nlet pendingCandidates = [];\nconst peerId = Math.random().toString(36).substring(2, 10);\n// to display own peerid in frontend\nconst getPeerId = ()=>{\n    return peerId;\n};\nconst connectserver = (onSignalMessage, onStatusUpdate)=>{\n    ws = new WebSocket(process.env.NEXT_PUBLIC_SIGNALING_SERVER_URL || \"http://\".concat(window.location.host));\n    // registering peerid at the socket\n    ws.onopen = ()=>{\n        ws.send(JSON.stringify({\n            type: \"register\",\n            peerId\n        }));\n        console.log(\"WebSocket connected for \".concat(peerId));\n    };\n    // on message to the socket(ICE/offer/answer) we call the callback\n    ws.onmessage = (e)=>{\n        const msg = JSON.parse(e.data);\n        if (msg.type === \"signal\") {\n            onSignalMessage(msg.from, msg.data);\n        }\n        if (msg.type === \"answer\") {\n            onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate(\"accepted\", msg.from);\n            onSignalMessage(msg.from, msg.data);\n        }\n        if (msg.type === \"decline\") {\n            onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate(\"declined\", msg.from);\n        }\n        if (msg.type === \"error\") {\n            if ( true && window.showConnectionError) {\n                window.showConnectionError(msg.message);\n            }\n        }\n    };\n};\n// to send the signal to socket server\nconst sendSignal = (targetId, data)=>{\n    ws.send(JSON.stringify({\n        type: \"signal\",\n        target: targetId,\n        data\n    }));\n};\nconst createConnection = async (targetId, onData, onReady)=>{\n    remotePeerId = targetId;\n    localConnection = new RTCPeerConnection();\n    // setting up data channel for file transfer\n    dataChannel = localConnection.createDataChannel(\"file\");\n    dataChannel.binaryType = \"arraybuffer\";\n    dataChannel.onopen = ()=>{\n        console.log(\"DataChannel open between \".concat(peerId, \" and \").concat(remotePeerId));\n        onReady(true);\n    };\n    // on getting data through the channel\n    dataChannel.onmessage = (e)=>onData(e.data);\n    // when we get ICE we send the signal to the socket server\n    localConnection.onicecandidate = (e)=>{\n        if (e.candidate) {\n            sendSignal(targetId, {\n                candidate: e.candidate\n            });\n        }\n    };\n    // asking to connect\n    const offer = await localConnection.createOffer();\n    await localConnection.setLocalDescription(offer);\n    sendSignal(targetId, {\n        sdp: offer\n    });\n};\nconst handleSignal = async (from, data, onData, onOfferReceived)=>{\n    if (!localConnection) {\n        remotePeerId = from;\n        localConnection = new RTCPeerConnection();\n        // Receiving data channel\n        localConnection.ondatachannel = (event)=>{\n            dataChannel = event.channel;\n            dataChannel.binaryType = \"arraybuffer\";\n            dataChannel.onmessage = (e)=>onData(e.data);\n        };\n        // ICE gathering\n        localConnection.onicecandidate = (e)=>{\n            if (e.candidate) {\n                sendSignal(from, {\n                    candidate: e.candidate\n                });\n            }\n        };\n    }\n    // Handling offer\n    if (data.sdp && data.sdp.type === \"offer\") {\n        pendingOffer = {\n            from,\n            sdp: data.sdp\n        };\n        onOfferReceived(from);\n        return;\n    }\n    // Handling answer\n    if (data.sdp && data.sdp.type === \"answer\") {\n        await localConnection.setRemoteDescription(new RTCSessionDescription(data.sdp));\n        for (const candidate of pendingCandidates){\n            await localConnection.addIceCandidate(new RTCIceCandidate(candidate));\n        }\n        pendingCandidates = [];\n        return;\n    }\n    // Handling ICE candidate\n    if (data.candidate) {\n        if (localConnection.remoteDescription && localConnection.remoteDescription.type) {\n            await localConnection.addIceCandidate(new RTCIceCandidate(data.candidate));\n        } else {\n            console.log(\"Queuing ICE candidate until remoteDescription is set.\");\n            pendingCandidates.push(data.candidate);\n        }\n    }\n};\nconst sendChunk = (chunk)=>{\n    if ((dataChannel === null || dataChannel === void 0 ? void 0 : dataChannel.readyState) === \"open\") {\n        dataChannel.send(chunk);\n    }\n};\nconst acceptOffer = async (from)=>{\n    if (!pendingOffer || pendingOffer.from !== from) return;\n    const remoteDesc = new RTCSessionDescription(pendingOffer.sdp);\n    await localConnection.setRemoteDescription(remoteDesc);\n    const answer = await localConnection.createAnswer();\n    await localConnection.setLocalDescription(answer);\n    sendSignal(pendingOffer.from, {\n        sdp: answer,\n        type: \"answer\"\n    });\n    pendingOffer = null;\n};\nconst declineOffer = (from)=>{\n    sendSignal(pendingOffer.from, {\n        type: \"decline\"\n    });\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/server_utils.js\n"));

/***/ })

});