// pages/devlogs.js
import Link from "next/link";

export default function DevLogs() {
  const logs = [
    {
      date: "2025-08-16",
      title: "Added File Integrity Check",
      description:
        "Added file integrity check using SHA-256 hashing. Now when you send a file, it computes the hash of the file and sends it along with the file. The receiver can verify the integrity of the file by comparing the received hash with the computed hash. This ensures that the file is not tampered with during transmission.",
    },
    {
      date: "2025-08-15",
      title: "Major Bug Fix",
      description:
        "Since the deployment of VoidShare,there was this problem that sometimes while sending file, crypto key is not defined error pops up but sometimes the file transfer was working fine. It was because of the race between keys exchange and keys generation. Sometimes if peers are connected before the keys are generated, the crypto key is not defined. This is now resolved. Now the keys sending waits for the keys to be generated before sending them. This is a major bug fix and now the file transfer should work smoothly without any errors.",
    },
    {
      date: "2025-08-15",
      title: "New feature: QR Codes",
      description:
        "New feature added to VoidShare. Now you can connect to your friend's device using QR codes. Just scan the QR code generated by your friend and you will be connected to their device. This makes it easier to connect with friends without needing to share long peer IDs.",
    },
    {
      date: "2025-08-13",
      title: "Resolved buffer overflow in different devices",
      description:
        "The last buffer overflow issue identified was resolved but only for desktops. Later on i saw that on my mobile phone it was still popping up. Turns out that the buffer sizes for different devices are different and also there was a small little bug in the code. That is resolved now, i have decreased the chunk size.",
    },
    {
      date: "2025-08-11",
      title: "Resolved backend server sleep issue",
      description:
        "Since the backend and frontend is deployed separately on the free version of render. On inactivity they both go to sleep. Now when the user opens the frontend, it wakes up but the backend is never woken up. As a result the user is never connected to the socket server. This is resolved, now when the frontend wakes up, it first sends a request to the backend and waits for it to wake up. A loading screen is displayed till then.",
    },
    {
      date: "2025-08-10",
      title: "Added Devlogs",
      description:
        "Devlogs page is added. You can see the development progress and updates of VoidShare here. I added previous date logs too. A little problem, when you move to logs page and then back to home, you may see a nextjs error that websocket is in connecting state. That does not affect the working, it is the app just trying again to connect to the server. I will try and fix that but no functionality is affected.",
    },
    {
      date: "2025-08-10",
      title: "Added WebRTC Data Channel Buffer Control",
      description:
        "As mention in the previous log, buffer overflow issue is now resolved and working.",
    },
    {
      date: "2025-08-08",
      title: "Problem Identified",
      description:
        "Ok so using it for a while. Major problem found: Buffer overflow issue When sending large files. Large files when sending causes overflow of the datachannel. The reason behind is that the file sending is much faster than receiving and the buffer limit for the P2P data channel is low. Solution found is to pause the sending when buffer reaches a limit and resume again. Will be implemented in the next update.",
    },
    {
      date: "2025-08-07",
      title: "Initial Release",
      description:
        "Finally VoidShare is deployed. The project was ready for a while but i was facing difficulty deploying it. Working with webrtc socket server with next.js frontend was new so deploying was a challenge. I tried so many times, so many ways. Finally I decided to learn dockers myself and deploy it. Whatever it takes right, so i did it. I am happy to announce that VoidShare is now live and you can use it to share files with your friends. It is a peer to peer file sharing app which uses webrtc for real time communication. It is secure, no server involved for file transfer, just to establish connection. File is encrypted using ECC and AES encryption. It is faster because of chunking. It is open source and you can contribute to it.",
    },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-b from-black to-gray-900 text-white px-6 py-10">
      <div className="max-w-3xl mx-auto">
        {/* Page title */}
        <h1 className="text-5xl font-bold text-red-500 drop-shadow-lg mb-8">
          ⚡ DevLogs
        </h1>

        {/* Logs list */}
        <div className="space-y-4">
          {logs.map((log, index) => (
            <details
              key={index}
              className="bg-gray-800 bg-opacity-50 border border-gray-700 rounded-xl shadow-lg hover:shadow-red-500/20 transition-shadow"
            >
              <summary className="cursor-pointer p-5 text-red-400 font-semibold text-xl flex justify-between items-center hover:text-red-300">
                <span>{log.title}</span>
                <span className="text-sm text-gray-400">{log.date}</span>
              </summary>
              <div className="px-5 pb-5 pt-2 text-gray-300 border-t border-gray-700">
                {log.description}
              </div>
            </details>
          ))}
        </div>

        {/* Back to Home button */}
        <div className="mt-10">
          <Link href="/">
            <button className="px-6 py-3 bg-gradient-to-r from-red-500 to-blue-500 rounded-lg text-lg font-semibold hover:scale-105 transition-transform">
              ← Back to Home
            </button>
          </Link>
        </div>
      </div>
    </div>
  );
}
